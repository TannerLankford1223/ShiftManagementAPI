{
	"info": {
		"_postman_id": "1c52c4f6-700e-497f-9944-f69143e8258c",
		"name": "Shift Management API",
		"description": "Shift Management API written using a micro-service architecture. Users can manage store, user, and shift information and email weekly shifts to each employee working for that week.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19721921"
	},
	"item": [
		{
			"name": "Address Service",
			"item": [
				{
					"name": "Create Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id was assigned\", () => pm.expect(jsonResponse.store_id).to.be.not.null);",
									"pm.test(\"address is correct\", () => pm.expect(jsonResponse.store_address).is.to.equal(\"142 Main Street\"));",
									"pm.environment.set(\"store_id\", jsonResponse.store_id);",
									"var value = pm.environment.get(\"num_stores\");",
									"pm.environment.set(\"num_stores\", ++value);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"store_address\" : \"142 Main Street\",\n    \"city\" : \"Kansas City\",\n    \"state\" : \"Missouri\",\n    \"zip_code\" : 12345\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/address/new-address",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								"new-address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success );",
									"pm.test(\"name is correct\", () => ",
									"  pm.expect(jsonResponse.store_address).to.equal(\"142 Main Street\"));",
									"pm.test(\"store_id is correct\", () => ",
									"    pm.expect(jsonResponse.store_id).to.equal(pm.environment.get(\"store_id\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/address/{{store_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								"{{store_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create A Second Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id was assigned\", () => pm.expect(jsonResponse.store_id).to.be.not.null);",
									"pm.test(\"address is correct\", () => pm.expect(jsonResponse.store_address).is.to.equal(\"705 Grand Boulevard\"));",
									"var value = pm.environment.get(\"num_stores\");",
									"pm.environment.set(\"num_stores\", ++value);",
									"pm.environment.set(\"store_to_delete\", jsonResponse.store_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"store_to_delete\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"store_address\": \"705 Grand Boulevard\",\n    \"city\": \"Kansas City\",\n    \"state\": \"Missouri\",\n    \"zip_code\": 12345\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/address/new-address",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								"new-address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"size of list correct\", () => pm.expect(jsonResponse.length).to.equal(pm.environment.get(\"num_stores\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/address/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id remains the same\", () => pm.expect(jsonResponse.store_id).to.equal(pm.environment.get(\"store_id\")));",
									"pm.test(\"address is updated\", () => pm.expect(jsonResponse.store_address).is.to.equal(\"505 State Line Road\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"store_address\" : \"505 State Line Road\",\n    \"city\" : \"Kansas City\",\n    \"state\" : \"Missouri\",\n    \"zip_code\" : 12345\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/address/update/{{store_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								"update",
								"{{store_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/address/{{store_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"address",
								"{{store_to_delete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Address service allows users to create, read, update, and delete information for each store for a company.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (pm.environment.get(\"num_stores\") === null) {",
							"    pm.environment.set(\"num_stores\", 0)",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Employee Service",
			"item": [
				{
					"name": "Register Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id was assigned\", () => pm.expect(jsonResponse.employee_id).to.be.not.null);",
									"pm.test(\"employee email is correct\", () => pm.expect(jsonResponse.employee_email).is.to.equal(\"john@email.com\"));",
									"pm.environment.set(\"employee_id\", jsonResponse.employee_id);",
									"var value = pm.environment.get(\"num_employees\");",
									"pm.environment.set(\"num_employees\", ++value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\" : \"John\",\n    \"last_name\" : \"Doe\",\n    \"employee_email\" : \"john@email.com\",\n    \"employee_phone\" : \"123-456-7890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success );",
									"pm.test(\"email is correct\", () => ",
									"  pm.expect(jsonResponse.employee_email).to.equal(\"john@email.com\"));",
									"pm.test(\"store_id is correct\", () => ",
									"    pm.expect(jsonResponse.employee_id).to.equal(pm.environment.get(\"employee_id\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/{{employee_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								"{{employee_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register A Second Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id was assigned\", () => pm.expect(jsonResponse.employee_id).to.be.not.null);",
									"pm.test(\"employee email is correct\", () => pm.expect(jsonResponse.employee_email).is.to.equal(\"jane@email.com\"));",
									"var value = pm.environment.get(\"num_employees\");",
									"pm.environment.set(\"num_employees\", ++value);",
									"pm.environment.set(\"employee_to_delete\", jsonResponse.employee_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\" : \"Jane\",\n    \"last_name\" : \"Doe\",\n    \"employee_email\" : \"jane@email.com\",\n    \"employee_phone\" : \"505-123-4321\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"size of list correct\", () => pm.expect(jsonResponse.length).to.equal(pm.environment.get(\"num_employees\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id remains the same\", () => pm.expect(jsonResponse.employee_id).to.equal(pm.environment.get(\"employee_id\")));",
									"pm.test(\"email is updated\", () => pm.expect(jsonResponse.employee_email).is.to.equal(\"paul@beatles.com\"));",
									"pm.test(\"first name is updated\", () => pm.expect(jsonResponse.first_name).is.to.equal(\"Paul\"));",
									"pm.test(\"last name is updated\", () => pm.expect(jsonResponse.last_name).is.to.equal(\"McCartney\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\" : \"Paul\",\n    \"last_name\" : \"McCartney\",\n    \"employee_email\" : \"paul@beatles.com\",\n    \"employee_phone\" : \"123-456-7890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/update/{{employee_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								"update",
								"{{employee_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/employee/{{employee_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"employee",
								"{{employee_to_delete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Employee service allows users to register, read, update, and delete information for employees of a company.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (pm.environment.get(\"num_employees\") === null) {",
							"    pm.environment.set(\"num_employees\", 0)",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Shift Server",
			"item": [
				{
					"name": "Create Shift",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id was assigned\", () => pm.expect(jsonResponse.shift_id).to.be.not.null);",
									"pm.environment.set(\"shift_id\", jsonResponse.shift_id);",
									"var value = pm.environment.get(\"num_shifts\");",
									"pm.environment.set(\"num_shifts\", ++value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"employee_id\" : {{employee_id}},\n        \"store_id\" : {{store_id}},\n        \"shift_date\" : \"{{tomorrow}}\",\n        \"start_time\" : \"08:00\",\n        \"end_time\" : \"17:00\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/new-shift",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"new-shift"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success );",
									"pm.test(\"shift_id is correct\", () => ",
									"    pm.expect(jsonResponse.shift_id).to.equal(pm.environment.get(\"shift_id\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/{{shift_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"{{shift_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"pm.test(\"success status\", () => pm.response.to.be.success);",
									"pm.test(\"id remains the same\", () => pm.expect(jsonResponse.shift_id).to.equal(pm.environment.get(\"shift_id\")));",
									"pm.test(\"shift date is updated\", () => pm.expect(jsonResponse.shift_date).is.to.equal(pm.environment.get(\"seven_days_later\")));",
									"pm.test(\"start time is updated\", () => pm.expect(jsonResponse.start_time).is.to.equal(\"09:30:00\"));",
									"pm.test(\"end time is updated\", () => pm.expect(jsonResponse.end_time).is.to.equal(\"14:30:00\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"employee_id\" : \"{{employee_id}}\",\n    \"store_id\" : \"{{store_id}}\",\n    \"shift_date\" : \"{{seven_days_later}}\",\n    \"start_time\" : \"09:30\",\n    \"end_time\" : \"14:30\"\n} \n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/update/{{shift_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"update",
								"{{shift_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/{{shift_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"{{shift_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Work Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"employee_id\" : \"{{employee_id}}\",\n        \"store_id\" : \"{{store_id}}\",\n        \"shift_date\" : \"{{tomorrow}}\",\n        \"start_time\" : \"10:15\",\n        \"end_time\" : \"13:45\"\n    },\n    {\n        \"employee_id\" : \"{{employee_id}}\",\n        \"store_id\" : \"{{store_id}}\",\n        \"shift_date\" : \"{{seven_days_later}}\",\n        \"start_time\" : \"08:00\",\n        \"end_time\" : \"17:00\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/new-schedule",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"new-schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Work Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"success status\", () => pm.response.to.be.success);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"store_id\" : \"{{store_id}}\",\n    \"start_date\" : \"{{tomorrow}}\",\n    \"end_date\" : \"{{seven_days_later}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/shift/schedule",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"shift",
								"schedule"
							]
						}
					},
					"response": []
				}
			],
			"description": "Shift service allows users to create, read, update, and delete shifts for a company. To create a shift the user must provide a valid employee id, store id, shift date, start time and end time.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const moment = require('moment');",
							"",
							"if (pm.environment.get(\"num_shifts\") === null) {",
							"    pm.environment.set(\"num_shifts\", 0)",
							"}",
							"",
							"pm.environment.set(\"tomorrow\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));",
							"pm.environment.set(\"seven_days_later\", moment().add(7, 'days').format(\"YYYY-MM-DD\"));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}